// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum PaymentType {
  ACCOMMODATION
  REGISTRATION
  BOTH
}

enum Roles {
  ADMIN
  RESIDENCYADMIN
}

enum MemberType {
  IIA_MEMBER
  NON_IIA_MEMBER
  STUDENT
}

enum PaymentStatus {
  SUCCESS
  FAILED
  PENDING
}

model Admin {
  id       Int    @id @default(autoincrement())
  email    String
  password String
  role     Roles
}

model ResidencyAdmin {
  id       Int    @id @default(autoincrement())
  email    String
  password String
  role     Roles
}

model User {
  id                       Int            @id @default(autoincrement())
  firstName                String
  lastName                 String
  email                    String
  mobile                   String
  companyName              String?
  designation              String?
  country                  String
  state                    String
  coaNumber                String?
  city                     String
  pinCode                  String
  collegeName              String         @default("")
  center                   String         @default("")
  gstNumber                String?
  gstBillingAddress        String?
  isBringingSpouse         Boolean
  bookingType              String?
  fileName                 String?
  groupSize                Int
  attended                 Boolean        @default(false)
  isStudentAffiliatedToIia Boolean        @default(false)
  createdAt                DateTime       @default(now())
  memberType               MemberType     @default(NON_IIA_MEMBER)
  spouse                   Spouse[]
  groupMmebers             GroupMember[]
  payments                 Payment[]
  accomodations            Accomodation[]
}

model Spouse {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  firstName String
  lastName  String
  email     String
  mobile    String
  createdAt DateTime @default(now())
}

model Group {
  id              Int            @id @default(autoincrement())
  numberOfMembers Int
  createdAt       DateTime
  GroupMember     GroupMember[]
  Accomodation    Accomodation[]
  Payment         Payment[]
}

model GroupMember {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  groupId   Int? // Make this optional temporarily to bypass the error
  group     Group?   @relation(fields: [groupId], references: [id])
  firstName String
  lastName  String
  email     String
  mobile    String
  createdAt DateTime @default(now())
}

model Payment {
  id            Int         @id @default(autoincrement())
  userId        Int
  user          User        @relation(fields: [userId], references: [id])
  amount        Decimal     @default(0.00) @db.Decimal(10, 2)
  orderId       Int?        @default(123)
  paymentMethod String
  groupId       Int?
  group         Group?      @relation(fields: [groupId], references: [id])
  paymentStatus String
  transactionId String      @unique
  createdAt     DateTime    @default(now())
  type          PaymentType
}

model Accomodation {
  id                     Int      @id @default(autoincrement())
  userId                 Int?
  user                   User?    @relation(fields: [userId], references: [id])
  accommodationConfirmed Boolean
  createdAt              DateTime @default(now())
  groupId                Int?
  group                  Group?   @relation(fields: [groupId], references: [id])
}
